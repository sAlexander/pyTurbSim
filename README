This is the pyTurbSim repository.  pyTurbSim is designed to be a development and testing platform for NREL's TurbSim tool and to simulate water turbulence for tidal device simulations (HydroTurbSim).  New spectral models can be implemented here easily and direct access to the 'core' code is more straightforward.

This software is copyrighted by the National Renewable Energy Laboratory. It is released publically under the Gnu GPLv3.

pyTurbSim (herafter pyTS) is a tool for producing spatial time-series (a sequence of 2-D planes) that are statistically similar to real oceanic and riverine Turbulence.  In particular, pyTS is designed to produce time-series with energy spectra, spatial coherence, mean profile, tke profile, and Reynold's-stress profiles that are similar to real marine/river turbulence.

################################
### HydroTurbSim and TurbSim ###

pyTS has been developed to simulate turbulence in the marine and river environment (i.e. in water).  It is based on 'TurbSim' (for atmospheric turbulence) developed at the National Renewable Energy Lab's National Wind Technology Center.  pyTS was written in Python to provide a more easily customizable, object-oriented interface to the functionality that TurbSim provides.  This makes it an ideal tool for testing new spectral models and performing validation tests of TurbSim functionality.

It does supports some, but not all spectral models of the original (atmospheric) TurbSim program.  Furthermore, pyTS does not support the 'coherent structures' functionality that Neil Kelley developed.  For producing simulations of atmospheric turbulence, I highly recommend using the original TurbSim program, developed by Bonnie Jonkman and Neil Kelley (based on the original SNLWIND tool developed by Paul Veers).  That having been said, I believe the 'SMOOTH' and 'IEC' spectral models are accurately represented by this tool.  All other spectral models have not been verified or are not included in this tool.  pyTS would not be possible without the work of Niel Kelley, Paul Veers and especially Bonnie Jonkman.  Thank you to all of these people for their excellent work and support in creating this tool.

################################
#### Installation and usage ####

On any system with an python installation pyTS can be executed as, e.g.:
python HydroTurbSim.py TurbSim.inp

On must Unix-like systems the HydroTurbSim.py file can be executed directly, e.g.:
./HydroTurbSim.py TurbSim.inp

In windows, if py2exe is installed, an executable (HydroTurbSim.exe) can be constructed using the command:
   python setup.py

## Using pyTS interactively or from within other python scripts/modules ##

Alternatively, one can use pyTS in an interactive shell or in other software packages.  To do this:
1) make sure the directory containing the 'hts' directory is on your python path (i.e. the directory containing this README).
2) import the 'hts' package (the 'hts' directory)
3) Once the package is loaded there are multiple ways to run TurbSim.
  a) by passing the 'run' function an input file, e.g.:
        hts.run('TurbSim.inp')           - This will write the output data to the appropriate binary files (e.g. TurbSim.bts)
  b) by passing the 'run_out' function an input file, e.g.:
        tms=hts.run_out('TurbSim.inp')   - This DOES NOT write files, instead the TurbSim-data object is returned to 'tms'.
  c) by passing a 'tscfg' dictionary to the 'run_main' function:
        tms=hts.run_main(*tscfg*)        - The *tscfg* object must contain all of the input parameters that are necessary for the spectral model.

################################
######## File Structure ########

The pyTS file structure is as follows:
1) execution programs and general information files (e.g. this README) are contained in the base directory.
2) the core of the program is contained entirely within the 'hts' directory (package).
3) the 'hts/profModels' and 'hts/turbModels' directories (sub-packages) contain the model-base modules (mBase.py) and all of the specific models.  New models can be added here relatively easily (see 'adding models' section).
4) the 'hts/tslib' directory contains the fortran library for more efficient execution (it may need to be compiled, see section on 'building tslib').

################################
##### HydroTurbSim objects #####

Several object types are defined in pyTS.  The most important ones are:
tscfg (base.py)                    - A 'configuration' dictionary that stores information from input (.inp) files and handles *some* defaults from those input files.
tsdata (base.py)                   - A data object that holds turbsim output and spectral model information.
modelBase (base.py)                - A base class for the profModel and turbModel objects (below).
profModel (profModels/mBase.py)    - The base 'profile model' object.  This is a base-class for all of the profile models defined in pyTS.  Each run of 
          		             pyTS uses one profile model that provides the mean velocity profile.
turbModel (turbModels/mBase.py)    - The base 'turbulence model' object.  This is a base-class for all of the turbulence models.  Each run of pyTS
          		           	 uses uses one turbulence model that provides the spectrum, tke profile, reynolds stress profile, etc.


################################
######## Building tslib ########

'tslib' is a fortran library implementation of the computationally expensive pieces of pyTS.  'f2py' has been used to link tslib to the python code.  pyTS produces identical results with or without tslib, but it works much faster (and uses nearly half as much memory) with it.  A MS windows pre-compiled version of tslib (tslib.pyd) is provided with this distribution.  On unix systems (and to rebuild the library for windows***) perform the following steps:
1) cd to <turbsim root>/hts/tslib/
2) type './build' and hit <enter>
If there are no errors, the tslib module will now be in the 'hts/' directory and pyTS will run much more efficiently.

***: Compiling tslib in windows
The build.bat script depends on the 'minGW' program-suite (and Python, of course).  In order to compile tslib you will need to:
1) Install minGW
2) Make sure that the following entries are in your system path ('path' Environmental Variable):
  a) <mingw-install-path>\bin\
  b) <python-install-path\Scripts\
  c) <python-install-path\bin\
3) Add '.py' to your 'PATHEXT' environment variable.

On windows 7, to access these parameters, go-to 'My Computer(Right-Click)->Properties->'Advanced System Settings'->'Environment Variables'.  Under system variables find 'Path' and 'PATHEXT', and modify the entries as indicated above.

################################
##### Quick Plot Example #######

Once pyTS is setup properly and a `TurbSim.wnd` file has been created from the default `TurbSim.inp` file, one can create a quick plot of the resulting data with the following script (could just be pasted into python):

```# third-party libraries
import pylab as pl
import numpy as np

# local libraries
import tsread

data = tsread.readBladed('TurbSim.wnd')
pl.pcolor(data[1,:,:,1])
pl.show()```


################################
##### Customizing pyTurbSim ####

Adding custom models is outlined briefly in the pyTurbSim wiki (github.com/lkilcher/pyTurbSim/wiki).  Details for doing so is outlined in the 'newModel_example.py' modules in the pyts/turbModels and pyts/profModels directories.

################################
######### Known Issues #########

pyTS does not yet output .sum files.

################################
######### Other Notes ##########

The documentation for pyTS is currently incomplete.  For further usage and operation information please see the TurbSim (original/atmosphere) documentation on the wind.nrel.gov/designcodes/ page.  Thanks for your patience.
